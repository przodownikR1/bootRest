buildscript {
    ext {
        springBootVersion = '1.3.2.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
          }
    }
    dependencies { 
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE'
        classpath 'gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.7'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.8'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
        classpath 'org.ajoberstar:gradle-git:1.3.2'
        classpath("info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.6")
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.1'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.6'
        classpath 'com.github.jruby-gradle:jruby-gradle-plugin:0.1.5'    
          classpath "net.saliman:gradle-cobertura-plugin:2.3.0"
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.7")

    }
}

apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'groovy'

apply from : 'gradle/jar.gradle'
apply from : 'gradle/depencencies.gradle'
apply from : 'gradle/gradleProperties.gradle'
apply from : 'gradle/distribution.gradle'

apply from : 'gradle/props.gradle'
//apply from : 'gradle/jpagen.gradle'
apply from : 'gradle/sonar.gradle'
apply from : 'gradle/quality.gradle'
apply from : 'gradle/coverage.gradle'
apply from : 'gradle/changelog.gradle'
apply from : 'gradle/test.gradle'
apply from : 'gradle/ascii.gradle'

check.dependsOn integrationTest

apply plugin: 'com.gorylenko.gradle-git-properties'



gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/src/main/resources")
}
jar {
	baseName = 'bootRest'
	version = '0.1.0-SNAPSHOT'
}
repositories {
	mavenCentral()
}

ext {
    springDataVersion = 'Fowler-RELEASE'
    springVersion = '4.2.4.RELEASE'
     hibernateVersion = "5.0.2.Final"
     javaxValidationVersion = "1.1.0.Final"
     hibernateValidatorVersion = "5.0.3.Final"
     lombokVersion = "1.16.4"     
     cucumberVersion = "1.2.2"
     apacheHttpVersion = "4.5"
     gatlingVersion = "2.1.4"
     
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    intTest
    generated.java.srcDirs=['src/main/generated']
    main {
        java { srcDir 'src/main/java' }
        groovy { srcDir 'src/main/groovy' }
        resources { srcDir 'src/main/resources' }
    }
    test {
        java { srcDir 'src/test/java' }
        groovy { srcDir 'src/test/groovy' }
        resources { srcDir 'src/test/resources' }
    }
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework:spring-framework-bom:4.2.4.RELEASE'
        mavenBom "org.springframework.data:spring-data-releasetrain:${springDataVersion}"
	}
}

configurations {
    providedRuntime
    jpametamodel
}

dependencies {
    
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-actuator-docs')
    compile('org.springframework.boot:spring-boot-starter-aop')
  
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
   // compile('org.springframework.boot:spring-boot-starter-data-rest')
   // compile('org.springframework.data:spring-data-rest-hal-browser')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-hateoas')
    compile('org.projectlombok:lombok:1.16.6')
  
    compile('org.springframework.retry:spring-retry')
    
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-web')
    
    
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.2'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.2'
    
    compile 'org.springframework:spring-core'
    compile 'org.springframework:spring-beans'
    compile 'org.springframework:spring-context'
    compile 'org.springframework:spring-orm'
    compile 'org.springframework:spring-tx'
    compile 'org.springframework:spring-aop'
    compile 'org.projectlombok:lombok:1.16.6'
    compile 'com.google.guava:guava:18.0'
   
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'org.hibernate:hibernate-validator:5.2.2.Final'
    compile 'org.hibernate:hibernate-core:5.0.2.Final'
    compile 'org.hibernate:hibernate-entitymanager:5.0.2.Final'
 
   
    compile 'org.lazyluke:log4jdbc-remix:0.2.7'
    compile 'com.h2database:h2'
	
    compile 'org.codehaus.groovy:groovy-all:2.4.5'
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.apache.httpcomponents:fluent-hc:4.5'
    
    
  //  jpametamodel ('org.hibernate:hibernate-jpamodelgen:5.0.6.Final')
    
    testCompile 'org.mockito:mockito-all:1.10.19'  
    testCompile 'com.jayway.jsonpath:json-path'
    testCompile 'junit:junit'
    testCompile 'org.assertj:assertj-core:3.2.0'
    testCompile 'com.jayway.awaitility:awaitility-java8:1.6.1'
    testCompile 'com.jayway.awaitility:awaitility:1.6.5'
 	testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7+'
    testCompile 'net.sf.json-lib:json-lib:2.4:jdk15'
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc:1.0.0.RELEASE')
    
}
test {
    systemProperties 'property': 'value'
    testLogging.showStandardStreams = true
}

configurations {
    all*.exclude group: "commons-logging", module: "commons-logging"
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.springframework') {
            details.useVersion '4.2.4.RELEASE'
        }
       if (details.requested.group == 'org.springframework.security') {
            details.useVersion '4.0.3.RELEASE'
        }
        if (details.requested.group == 'org.hibernate') {
            details.useVersion '5.0.2.Final'
        }
    }

}

task generateMetaModel(type: JavaCompile, group: 'build', description: 'metamodel generate') {
    
        source = sourceSets.main.java
        classpath = configurations.compile + configurations.jpametamodel
        options.compilerArgs = ["-proc:only"]
        destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
    
        doFirst {
            logger.warn("Prepare dictionary structures  " +sourceSets.generated.java.srcDirs)
            //delete(sourceSets.generated.java.srcDirs)
            //sourceSets.generated.java.srcDirs.mkdirs()
        }
    }
    compileJava.dependsOn generateMetaModel
    compileJava.source sourceSets.generated.java, sourceSets.main.java

afterEvaluate {
    configure(allProcessResourcesTasks()) {
    filter(ReplaceTokens,
    tokens: [
    baseName: project.jar.baseName,
    version: project.jar.version,
    gradleVersion: project.gradle.gradleVersion,
    username: System.properties['user.name'],
    buildDate: new Date().format("yyyy-MM-dd HH:mm")]
    )
    }
    }
    def allProcessResourcesTasks() {
    sourceSets*.processResourcesTaskName.collect {
    tasks[it]
    }
    }


import org.apache.tools.ant.filters.*


buildscript {
    ext { springBootVersion = '1.4.1.RELEASE' }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE'
         classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:1.2"
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.7")
    }
}
plugins {
    id "org.sonarqube" version "2.0.1"
}



apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.sonarqube'
apply plugin: 'groovy'

jar {
    baseName = 'bootRestMicro'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}
sourceSets {
    intTest
    generated.java.srcDirs=['src/main/generated']
    main {
        java { srcDir 'src/main/java' }
        groovy { srcDir 'src/main/groovy' }
        resources { srcDir 'src/main/resources' }
    }
    test {
        java { srcDir 'src/test/java' }
        groovy { srcDir 'src/test/groovy' }
        resources { srcDir 'src/test/resources' }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/src/main/resources")
}

configurations {
    providedRuntime
    jpametamodel
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-configuration-processor'
    compile 'org.springframework.hateoas:spring-hateoas:0.20.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-devtools'
   // compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-logging'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile group: 'com.github.javafaker', name: 'javafaker', version: '0.10'
    compile group: 'org.springframework.plugin', name: 'spring-plugin-core', version: '1.2.0.RELEASE'
    
    //compile 'com.netflix.hystrix:hystrix-core:1.4.14'
    //compile 'com.netflix.hystrix:hystrix-codahale-metrics-publisher:1.4.+'
    
    compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: '3.1.2'
    compile group: 'io.dropwizard.metrics', name: 'metrics-graphite', version: '3.1.2'
    compile group: 'io.dropwizard.metrics', name: 'metrics-jvm', version: '3.1.2'
    compile group: 'io.dropwizard.metrics', name: 'metrics-healthchecks', version: '3.1.2'
    compile group: 'io.dropwizard.metrics', name: 'metrics-logback', version: '3.1.2'      
    compile group: 'io.dropwizard.metrics', name: 'metrics-servlets', version: '3.1.2'
     compile ("com.ryantenney.metrics:metrics-spring:3.1.2") {
        exclude(module: 'metrics-core')
        exclude(module: 'metrics-healthchecks')
}
    compile 'org.projectlombok:lombok'
    compile 'com.google.guava:guava:18.+'
    
   // compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.5.0'  
   // compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.5.0'        
            
    compile 'org.lazyluke:log4jdbc-remix:0.2.7'
    compile 'com.h2database:h2'
    compile 'org.webjars:bootstrap:3.3.5'
    compile 'org.webjars:jquery:2.1.4'
    compile 'org.webjars:jquery-ui:1.11.4'
    compile 'org.webjars:jquery-ui-themes:1.11.4'
    compile ("org.webjars.bower:jquery.bootgrid:1.2.0") { exclude group: 'org.webjars.bower' }            

     compile 'com.fasterxml.jackson.core:jackson-databind'

    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.apache.httpcomponents:fluent-hc:4.5'

    compile("org.apache.activemq:activemq-client")
    compile("org.apache.xbean:xbean-spring:4.5") { exclude module: "org.springframework:spring" }
    compile("org.springframework:spring-jms:4.3.3.RELEASE")
    compile("org.apache.activemq:activemq-broker:5.14.1")

   
    compile group: 'org.apache.camel', name: 'camel-spring-boot', version: '2.18.0'
    compile group: 'org.apache.camel', name: 'camel-core', version: '2.18.0'
    compile group: 'org.apache.camel', name: 'camel-spring-boot-starter', version: '2.18.0'

   //jpametamodel ('org.hibernate:hibernate-jpamodelgen:5.0.6.Final')
    compile 'javax.money:money-api:1.0'
    compile 'org.javamoney:moneta:1.0'
    runtime('com.h2database:h2')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}


test {
    systemProperties 'property': 'value'
    testLogging.showStandardStreams = true
}

configurations {
    all*.exclude group: "commons-logging", module: "commons-logging"
}

task generateMetaModel(type: JavaCompile, group: 'build', description: 'metamodel generate') {

    source = sourceSets.main.java
    classpath = configurations.compile + configurations.jpametamodel
    options.compilerArgs = ["-proc:only"]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()

    doFirst {
        logger.warn("Prepare dictionary structures  " +sourceSets.generated.java.srcDirs)
        //delete(sourceSets.generated.java.srcDirs)
        //sourceSets.generated.java.srcDirs.mkdirs()
    }
}
compileJava.dependsOn generateMetaModel
compileJava.source sourceSets.generated.java, sourceSets.main.java

afterEvaluate {
    configure(allProcessResourcesTasks()) {
        filter(ReplaceTokens,
        tokens: [
            baseName: project.jar.baseName,
            version: project.jar.version,
            gradleVersion: project.gradle.gradleVersion,
            username: System.properties['user.name'],
            buildDate: new Date().format("yyyy-MM-dd HH:mm")]
        )
    }
}
def allProcessResourcesTasks() {
    sourceSets*.processResourcesTaskName.collect { tasks[it] }
}
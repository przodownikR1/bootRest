import org.apache.tools.ant.filters.*

buildscript {
    ext { springBootVersion = '1.5.2.RELEASE' }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
    	classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")        
        classpath 'io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE'
         classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:1.2"
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.7")
    }
}
plugins {
    id "org.sonarqube" version "2.0.1"
}


apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'groovy'

apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.sonarqube'
apply from: 'gradle/depencencies.gradle'


gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/src/main/resources")
}



jar {
    baseName = 'bootRest'
    version = '0.1.0-SNAPSHOT'
}

repositories { mavenCentral() }


sourceCompatibility = 1.8
targetCompatibility = 1.8




sourceSets {
    intTest
    generated.java.srcDirs=['src/main/generated']
    main {
        java { srcDir 'src/main/java' }
        groovy { srcDir 'src/main/groovy' }
        resources { srcDir 'src/main/resources' }
    }
    test {
        java { srcDir 'src/test/java' }
        groovy { srcDir 'src/test/groovy' }
        resources { srcDir 'src/test/resources' }
    }
}





test {
    systemProperties 'property': 'value'
    testLogging.showStandardStreams = true
}

configurations {
    all*.exclude group: "commons-logging", module: "commons-logging"
}


task generateMetaModel(type: JavaCompile, group: 'build', description: 'metamodel generate') {

    source = sourceSets.main.java
    classpath = configurations.compile + configurations.jpametamodel
    options.compilerArgs = ["-proc:only"]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()

    doFirst {
        logger.warn("Prepare dictionary structures  " +sourceSets.generated.java.srcDirs)
        //delete(sourceSets.generated.java.srcDirs)
        //sourceSets.generated.java.srcDirs.mkdirs()
    }
}
compileJava.dependsOn generateMetaModel
compileJava.source sourceSets.generated.java, sourceSets.main.java

afterEvaluate {
    configure(allProcessResourcesTasks()) {
        filter(ReplaceTokens,
        tokens: [
            baseName: project.jar.baseName,
            version: project.jar.version,
            gradleVersion: project.gradle.gradleVersion,
            username: System.properties['user.name'],
            buildDate: new Date().format("yyyy-MM-dd HH:mm")]
        )
    }
}
def allProcessResourcesTasks() {
    sourceSets*.processResourcesTaskName.collect { tasks[it] }
}

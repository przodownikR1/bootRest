import org.apache.tools.ant.filters.*

buildscript {
    ext {
        springBootVersion = '1.3.1.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
          }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath "org.sonarqube.gradle:gradle-sonarqube-plugin:1.1"
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.7")
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'groovy'

apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.sonarqube'


sonarqube {
    properties {
       property "sonar.projectKey", "bootRest"
       property "sonar.projectName", "bootRest"

        

        property "sonar.host.url", "http://localhost:9000"
        property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonar3"
        property "sonar.jdbc.password", "sonar3"
    }
  }

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/src/main/resources")
}



jar {
	baseName = 'bootRest'
	version = '0.1.0-SNAPSHOT'
}

repositories {
	mavenCentral()
}


ext {
    springDataVersion = 'Fowler-RELEASE'
    springVersion = '4.2.3.RELEASE'
     hibernateVersion = "5.0.2.Final"
     javaxValidationVersion = "1.1.0.Final"
     hibernateValidatorVersion = "5.0.3.Final"
     lombokVersion = "1.16.4"
     
     cucumberVersion = "1.2.2"
     apacheHttpVersion = "4.5"
     gatlingVersion = "2.1.4"
     
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    intTest
    main {
        java { srcDir 'src/main/java' }
        groovy { srcDir 'src/main/groovy' }
        resources { srcDir 'src/main/resources' }
    }
    test {
        java { srcDir 'src/test/java' }
        groovy { srcDir 'src/test/groovy' }
        resources { srcDir 'src/test/resources' }
    }
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework:spring-framework-bom:4.2.3.RELEASE'
        mavenBom "org.springframework.data:spring-data-releasetrain:${springDataVersion}"
	}
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-web'
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-devtools')
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    //compile 'org.springframework.data:spring-data-commons:1.7.2.RELEASE'
    compile 'org.springframework.hateoas:spring-hateoas:0.19.0.RELEASE' //19 problem  Failed to instantiate [com.fasterxml.jackson.databind.ObjectMapper]
    //n: Error creating bean with name 'halObjectMapper' defined in class path resource [org/springframework/boot/autoconfigure/data/rest/SpringBootRepositoryRestMvcConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.fasterxml.jackson.databind.ObjectMapper]:
    //compile 'org.springframework.data:spring-data-rest-webmvc'
    
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.2'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.2'
	compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-starter-logging'
  
   
    compile 'org.springframework:spring-core'
    compile 'org.springframework:spring-beans'
    compile 'org.springframework:spring-context'
    compile 'org.springframework:spring-orm'
    compile 'org.springframework:spring-tx'
    compile 'org.springframework:spring-aop'
    compile 'org.projectlombok:lombok:1.16.6'
    compile 'com.google.guava:guava:18.0'
   
    
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'org.hibernate:hibernate-validator:5.2.2.Final'
    compile 'org.hibernate:hibernate-core:5.0.2.Final'
    compile 'org.hibernate:hibernate-entitymanager:5.0.2.Final'
    compile 'javax.money:money-api:1.0'
    compile 'org.javamoney:moneta:1.0'
   
    
    compile 'com.h2database:h2'
	compile 'com.google.guava:guava:18.0'
	compile 'org.webjars:bootstrap:3.3.5'
	compile 'org.webjars:jquery:2.1.4'
	compile 'org.webjars:jquery-ui:1.11.4'
	compile 'org.webjars:jquery-ui-themes:1.11.4'
	compile ("org.webjars.bower:jquery.bootgrid:1.2.0") {
		exclude group: 'org.webjars.bower'
	}
    compile 'com.github.tomakehurst:wiremock:1.57'
    
    compile 'org.codehaus.groovy:groovy-all:2.4.5'
    compile 'com.fasterxml.jackson.core:jackson-databind'


    
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.apache.httpcomponents:fluent-hc:4.5'
    
    
    compile("org.apache.activemq:activemq-client")
    compile("org.apache.xbean:xbean-spring:4.2") {
        exclude module: "org.springframework:spring"
    }
    compile("org.springframework:spring-jms:4.1.7.RELEASE")
    compile("org.apache.activemq:activemq-broker:5.11.1")
    
    testCompile 'org.mockito:mockito-all:1.10.19'
   
    testCompile 'io.gatling:gatling-app:2.1.4'
    testCompile 'io.gatling.highcharts:gatling-charts-highcharts:2.1.4'
    
    
    testCompile 'com.jayway.jsonpath:json-path'
    testCompile 'junit:junit'
    testCompile 'org.assertj:assertj-core:3.2.0'
    testCompile 'com.jayway.awaitility:awaitility-java8:1.6.1'
    testCompile 'com.jayway.awaitility:awaitility:1.6.5'
    testCompile 'org.springframework:spring-test'
    testCompile 'info.cukes:cucumber-junit:1.2.2'
    testCompile 'info.cukes:cucumber-spring:1.2.2'
    

	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile 'org.assertj:assertj-core:3.2.0'
    
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7+'
    testCompile 'net.sf.json-lib:json-lib:2.4:jdk15'
    
}


configurations {
    all*.exclude group: "commons-logging", module: "commons-logging"
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.springframework') {
            details.useVersion '4.2.3.RELEASE'
        }
       if (details.requested.group == 'org.springframework.security') {
            details.useVersion '4.0.3.RELEASE'
        }
        if (details.requested.group == 'org.hibernate') {
            details.useVersion '5.0.2.Final'
        }
    }

}

afterEvaluate {
    configure(allProcessResourcesTasks()) {
    filter(ReplaceTokens,
    tokens: [baseName: project.jar.baseName,
    version: project.jar.version,
    gradleVersion: project.gradle.gradleVersion]
    )
    }
    }
    def allProcessResourcesTasks() {
    sourceSets*.processResourcesTaskName.collect {
    tasks[it]
    }
    }


import org.ajoberstar.grgit.*

ext {
    isReleaseVersion = !project.version.endsWith("SNAPSHOT")
    git = org.ajoberstar.grgit.Grgit.open(file('.'))
    propsFile = file('version.properties')
}


class GitInfo{
    String changeLog;
    String bugfix;
    
    GitInfo(String changeLog, String bugfix){
        this.changeLog = changeLog;
        this.bugfix = bugfix;
    }
    @Override
    String toString() {
        "changeLog :   $changeLog , bugfix:   $bugfix"
    }
}

class ProjectVersion {
    Integer major
    Integer minor
    Integer hotfix
    Boolean release
    GitInfo gitInfo;

    ProjectVersion(Integer major, Integer minor, Integer hotfix) {
        this.major = major
        this.minor = minor
        this.hotfix = hotfix
        this.release = Boolean.FALSE
    }
    ProjectVersion(Integer major, Integer minor, Integer hotfix, GitInfo gitInfo) {
        this.major = major
        this.minor = minor
        this.hotfix = hotfix
        this.release = Boolean.FALSE
        this.gitInfo = gitInfo;
    }
    
    ProjectVersion(Integer major, Integer minor, Integer hotfix, Boolean release) {
        this(major, minor, hotfix)
        this.release = release
    }
    
    ProjectVersion(Integer major, Integer minor, Integer hotfix, Boolean release, GitInfo gitInfo) {
        this(major, minor, hotfix, gitInfo)
        this.release = release
    }
    
    @Override
    String toString() {
        "$major.$minor.$hotfix${release ? '' : '-SNAPSHOT'}  -> $gitInfo"
    }
}

ProjectVersion getVersionInfo(String tag,String changelog,String bugfix){
    def tempVersion = tag.split("\\.")
    
    
    println "----------------------------------------0" + tempVersion[0]
    println "----------------------------------------1" + tempVersion[1]
    println "----------------------------------------2" + tempVersion[2]
    
    return new ProjectVersion(
        Integer.parseInt(tempVersion[0]),
        Integer.parseInt(tempVersion[1]),
        Integer.parseInt(tempVersion[2]),
        new GitInfo(changelog,bugfix))
  }

def lastReleaseVersionByTag(){
    return  git.tag.list().first().fullName.replaceAll('refs/tags/','')
}

task lastReleaseVersionByTag(group: 'versioning',  description: 'get last release from tags'){
    println lastReleaseVersionByTag()
}


ProjectVersion getIncreaseVersion(String verDefinition) {
    version = getVersionInfo(lastReleaseVersionByTag(),"slsslslls","sdfsdfsdf")
    switch(verDefinition){
        case 'major': 
             ++version.major
             version.minor = 0
             version.hotfix = 0
            break
        case 'minor': 
              ++version.minor
              version.hotfix = 0
            break
        case 'hotfix': ++version.hotfix
            break
        case 'release': 
            version.release = true
            break
        default: throw new GradleException("Invalid version type '$verDef. Allowed types: ['Major', 'Minor', 'Hotfix', 'Release']")
    }
    return version
}

task printVersion(group: 'versioningIncrease', description: 'Prints the current project version') << {
    logger.quiet "Version:  "+getVersionInfo("1.5.3","some changelog", "1.2 bugfix")
    logger.quiet "Increase version " + getIncreaseVersion("major")
}

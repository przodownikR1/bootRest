import org.ajoberstar.grgit.*
ext {
    
    git = org.ajoberstar.grgit.Grgit.open(file('.'))
    propsFile = file('version.properties')
}
class GitInfo{
    String changeLog;
    String bugfix;
    
    GitInfo(String changeLog, String bugfix){
        this.changeLog = changeLog;
        this.bugfix = bugfix;
    }
    @Override
    String toString() {
        "changeLog :   $changeLog , bugfix:   $bugfix"
    }
}

class ProjectVersion {
    Integer major
    Integer minor
    Integer hotfix
    Boolean release 
    
    ProjectVersion(Integer major, Integer minor, Integer hotfix) {
        this.major = major
        this.minor = minor
        this.hotfix = hotfix 
    }
   
    ProjectVersion(Integer major, Integer minor, Integer hotfix, Boolean release) {
        this(major, minor, hotfix)
        this.release = release
    }
     
    @Override
    String toString() {
        "$major.$minor.$hotfix${release ? '' : '-SNAPSHOT'}"
    }
}

ProjectVersion getVersionInfo(){
    def tempVersion = lastReleaseVersionByTag().split("\\.")
    return new ProjectVersion(
        Integer.parseInt(tempVersion[0].trim()),
        Integer.parseInt(tempVersion[1].trim()),
        Integer.parseInt(tempVersion[2].trim()),
        !project.version.endsWith("SNAPSHOT")
        )
  }

def lastReleaseVersionByTag(){    
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'for-each-ref', 'refs/tags' ,'--count', '1' ,'--sort=taggerdate', '--format=\'%(refname:short)\''
        standardOutput = stdout
    }
    String result =  stdout.toString()
    return result.replaceAll('\'','').trim()
}

task lastReleaseVersionByTag(group: 'versioning',  description: 'get last release from tags'){
    logger.quiet "Latest Version:  "  +  lastReleaseVersionByTag()
    logger.quiet "new increase version " + getIncreaseVersion()
}

ProjectVersion getIncreaseVersion(String verDefinition) {
    version = getVersionInfo()
    if(verDefinition == null){
        verDefinition = 'hotfix'
    }
    switch(verDefinition){
        case 'major': 
             ++version.major
             version.minor = 0
             version.hotfix = 0
            break
        case 'minor': 
              ++version.minor
              version.hotfix = 0
            break
        case 'hotfix': ++version.hotfix
            break
        case 'release': 
            version.release = true
            break
        default: throw new GradleException("Invalid version type '$verDef. Allowed types: ['Major', 'Minor', 'Hotfix', 'Release']")
    }
    return version
}

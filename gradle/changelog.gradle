buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
          }
    }
    dependencies {
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.7")
        classpath 'org.ajoberstar:gradle-git:1.3.2'
    }
}

apply plugin: 'com.gorylenko.gradle-git-properties'

import org.ajoberstar.grgit.*
ext {
    git = org.ajoberstar.grgit.Grgit.open(file('.'))
    propsFile = file('version.properties')
    isSnapshot = version.endsWith('-SNAPSHOT')
}

class GitInfo{
    String changeLog;
    String bugfix;
    
    GitInfo(String changeLog, String bugfix){
        this.changeLog = changeLog;
        this.bugfix = bugfix;
    }
    @Override
    String toString() {
        "changeLog :   $changeLog , bugfix:   $bugfix"
    }
}

class ProjectVersion {
    Integer major
    Integer minor
    Integer hotfix
    Boolean release
    String type 
    
    ProjectVersion(Integer major, Integer minor, Integer hotfix) {
        this.major = major
        this.minor = minor
        this.hotfix = hotfix 
    }
   
    ProjectVersion(Integer major, Integer minor, Integer hotfix, Boolean release) {
        this(major, minor, hotfix)
        this.release = release
    }
     
    @Override
    String toString() {
        "$major.$minor.$hotfix.${release ? 'RELEASE' : 'SNAPSHOT'}"
    }
}

ProjectVersion getVersionInfo(){
    def tempVersion = lastReleaseVersionByTag().split("\\.")
    return new ProjectVersion(
        Integer.parseInt(tempVersion[0].trim()),
        Integer.parseInt(tempVersion[1].trim()),
        Integer.parseInt(tempVersion[2].trim()),
        isSnapshot
        )
  }


ProjectVersion getIncreaseVersion(String verDefinition) {
    version = getVersionInfo()
    if(verDefinition == null){
        verDefinition = 'hotfix'
    }
    switch(verDefinition){
        case 'major': 
             ++version.major
             version.minor = 0
             version.hotfix = 0
             version.type='major change'
            break
        case 'minor': 
              ++version.minor
              version.hotfix = 0
              version.type='minor change'
            break
        case 'hotfix': ++version.hotfix
            version.type='hotfix/bugfix change'
            break
        case 'release': 
            version.release = true
            break
        default: throw new GradleException("Invalid version type '$verDef. Allowed types: ['Major', 'Minor', 'Hotfix', 'Release']")
    }
    return version
}


gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/src/main/resources")
}


def markTask(){
    def tags = git.tag.list()
    File f = file("${project.rootDir}/src/main/resources/last-release-commit.txt")
    f.write(lastReleaseCommiterByTag())

}
def lastReleaseCommiterByTag(){
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '--tags', -1 , '--simplify-by-decoration',  '--format=\'%H\''
        standardOutput = stdout
    }
    String result =  stdout.toString()
    return result.replaceAll('\'','').trim()
}

def lastReleaseVersionByTag(){
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'for-each-ref', 'refs/tags' ,'--count', '1' ,'--sort=-taggerdate', '--format=\'%(refname:short)\''
        standardOutput = stdout
    }
    String result =  stdout.toString()
    return result.replaceAll('\'','').trim()
}

//git show-ref --tags 
task infoTag(group: 'versioning',  description: 'basic info about current git and project situation'){
    logger.quiet "Latest Version: :  "  +  lastReleaseVersionByTag()
    logger.quiet "new increase version : " + getIncreaseVersion("hotfix")
    logger.quiet "last tagger commit hash : " + lastReleaseCommiterByTag()
    logger.quiet "current branch: " + git.branch.getCurrent().name
    logger.quiet " isSnapshotOrRelease  : " +  isSnapshot
}
//lastReleaseVersionByTag.enable=false


task tagRelease(group: 'versioning',  description: ' createNewTag -> create '){
   onlyIf{
        return new File(projectDir, '.git').exists()
    }
    git.checkout(branch: 'dev')
    git.pull()
    def currentBranch = git.branch.getCurrent().name
    def userName = System.properties['user.name']
   
    def currentProjectVersion = getIncreaseVersion("hotfix")
   
    def versionType  = currentProjectVersion.type
    logger.quiet '+++++++++++++++++ createNewTag  =>  currentProjVersion :  ' +currentProjectVersion + ' versionType : ' + versionType + ' userName : ' + userName
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'tag', '-a', currentProjectVersion , '-m' , userName+ ' ' +currentProjectVersion
        standardOutput = stdout
    }
    git.tag.add(name: currentProjectVersion, annotate: true, message: " '$versionType' by '$userName'")
    commit(currentProjectVersion + ' versionType : ' + versionType + ' userName : ' + userName)
    git.push(tags: true)
    doLast {
        logger.quiet 'mark current version into last-release file  and generate changelog...'
        markTask()
        generateChangelog()
    }
}

def commit(String message)  {
    def clean=git.status().isClean()
    if (!clean) {
        git.add(patterns: ['.'])
        git.commit(message: "$message- ${new SimpleDateFormat("yy-MM-dd HH:mm:ss").format(new Date())}", all: true)
    }else{
        logger.quiet "Clean, commit skipped."
    }
}


import java.text.SimpleDateFormat
def generateChangelog() {
    logger.quiet "generateChangeLog........"
    def changelog = ""
    def tags = git.tag.list()
    def commits = git.log {
         range(file("${project.rootDir}/src/main/resources/last-release-commit.txt").text, "HEAD")
    }
  
    def changelogFile = new File("${project.rootDir}/src/main/resources/changelog.txt")
    changelogFile.append("Changes in version : ")
    changelogFile.append("[")
    changelogFile.append(tags.first().fullName.replaceAll('refs/tags/','') ? tags.first().fullName.replaceAll('refs/tags/','') : " empty ")
    changelogFile.append("]")
    changelogFile.append(" - message -> ")
    changelogFile.append("[")
    changelogFile.append(tags.first().shortMessage?tags.first().shortMessage  : " empty ")
    changelogFile.append("]")
    changelogFile.append("  - date -> :  (")
    changelogFile.append(commits.first().getDate() ? commits.first().getDate() : " not")
    changelogFile.append(")")
    changelogFile.append("\n");
     
    commits.each {
        def message = it.fullMessage
        def time = it.getDate()
      /*if(message.startsWith("*"){
            changelogFile.append("fixed ")
            changelogFile.append(message.replaceAll('*',''))
        }
        if(message.startsWith("+"){
            changelogFile.append("added ")
            changelogFile.append(message.replaceAll('+',''))
        }
        if(message.startsWith("-"){
            changelogFile.append("removed ")
            changelogFile.append(message.replaceAll('-',''))
        }
        if(message.startsWith("#"){
            changelogFile.append("modification ")
            changelogFile.append(message.replaceAll('#',''))
        }
        if(message.startsWith("@"){
            changelogFile.append("upgrade ")
            changelogFile.append(message.replaceAll('@',''))
        }
        if(message.startsWith("%"){
            changelogFile.append("deprecated ")
            changelogFile.append(message.replaceAll('%',''))
        }
        if(message.startsWith("&"){
            changelogFile.append("improve ")
            changelogFile.append(message.replaceAll('&',''))
        }*/
        changelogFile.append(message)
        def formatDate = new SimpleDateFormat("yy-MM-dd HH:mm:ss").format(time)
        changelogFile.append(formatDate)
        changelogFile.append("\n");
           
    }
    changelogFile.append("\n\n\n\n")
    file("${project.rootDir}/src/main/resources/last-release-commit.txt").text = commits.first().id
}

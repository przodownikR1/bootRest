buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
          }
    }
    dependencies {
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.7")
        classpath 'org.ajoberstar:gradle-git:1.3.2'
    }
}

apply plugin: 'com.gorylenko.gradle-git-properties'

import org.ajoberstar.grgit.*
ext {
    git = org.ajoberstar.grgit.Grgit.open(file('.'))
    propsFile = file('version.properties')
}

class GitInfo{
    String changeLog;
    String bugfix;
    
    GitInfo(String changeLog, String bugfix){
        this.changeLog = changeLog;
        this.bugfix = bugfix;
    }
    @Override
    String toString() {
        "changeLog :   $changeLog , bugfix:   $bugfix"
    }
}

class ProjectVersion {
    Integer major
    Integer minor
    Integer hotfix
    Boolean release 
    
    ProjectVersion(Integer major, Integer minor, Integer hotfix) {
        this.major = major
        this.minor = minor
        this.hotfix = hotfix 
    }
   
    ProjectVersion(Integer major, Integer minor, Integer hotfix, Boolean release) {
        this(major, minor, hotfix)
        this.release = release
    }
     
    @Override
    String toString() {
        "$major.$minor.$hotfix${release ? '' : '-SNAPSHOT'}"
    }
}

ProjectVersion getVersionInfo(){
    def tempVersion = lastReleaseVersionByTag().split("\\.")
    return new ProjectVersion(
        Integer.parseInt(tempVersion[0].trim()),
        Integer.parseInt(tempVersion[1].trim()),
        Integer.parseInt(tempVersion[2].trim()),
       // !project.version.endsWith("SNAPSHOT")
        true
        )
  }


ProjectVersion getIncreaseVersion(String verDefinition) {
    version = getVersionInfo()
    if(verDefinition == null){
        verDefinition = 'hotfix'
    }
    switch(verDefinition){
        case 'major': 
             ++version.major
             version.minor = 0
             version.hotfix = 0
            break
        case 'minor': 
              ++version.minor
              version.hotfix = 0
            break
        case 'hotfix': ++version.hotfix
            break
        case 'release': 
            version.release = true
            break
        default: throw new GradleException("Invalid version type '$verDef. Allowed types: ['Major', 'Minor', 'Hotfix', 'Release']")
    }
    return version
}


gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/src/main/resources")
}


task push(group: 'versioning',  description: 'Push to remote branch.')<<{
    System.setProperty("org.ajoberstar.grgit.auth.username","przodownikR1")
    System.setProperty("org.ajoberstar.grgit.auth.password","******")
    git.push()
}

task gitPrepareDev(group: 'versioning',  description: 'git -> preparate dev') << {
    git.checkout(branch: 'dev')
    git.fetch()
    git.merge(head: 'origin/HEAD', mode: org.ajoberstar.grgit.operation.MergeOp.Mode.ONLY_FF)
    tasks.replaceVersion.execute();
}


task gitStatus(group: 'versioning',  description: 'git status') << {
    
    def status = git.status()
    logger.quiet ""+status
    if(status.unstaged.added || status.unstaged.modified || status.unstaged.removed ||
        status.staged.added || status.staged.modified || status.staged.removed) {
       logger.warn '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> '
       logger.warn 'committing changes'
       logger.warn '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> '
    }
}

task gitPull(group: 'versioning',  description: 'pull from remote branch'){
    //git.checkout(branch: 'dev')
    git.pull()
}

def commit()  {
    def clean=git.status().isClean()
    if (!clean) {
        git.add(patterns: ['.'])
        git.commit(message: "release - ${new SimpleDateFormat("yy-MM-dd HH:mm:ss").format(new Date())}", all: true)
    }else{
        println("Clean, commit skipped.")
    }
}


task releaseCanditate(group: 'versioning',  description: 'prepare to create new merge request'){
    onlyIf{
        return new File(projectDir, '.git').exists()
    }
    def id =  git.head().abbreviatedId
    def name = git.branch.getCurrent().name
    def workDir = new File(".").absolutePath
    
    println  'prepare to merge request....'   
}



task tagRelease(group: 'versioning',  description: 'tagRelease -> create tag on release' ) {
    def tags = git.tag.list()
    println '+++++++++++++++++ tagRelease'
    tags.each { Tag t ->
     //  println "id: $t.commit.id " + " fullMessage :  "  + t.commit.fullMessage + " time :  " + t.commit.time + "  date :  " + t.commit.getDate()
     //  println "tag : " +  t.fullMessage + " fullName :   "+t.fullName + "  tagger  : " + t.tagger.name
       
    }  
}
def markTask(){
    def tags = git.tag.list()
    File f = file("${project.rootDir}/src/main/resources/last-release-commit.txt")
    f.write(lastReleaseCommiterByTag())
    println '+++++++++++++++++ markTask'
}
def lastReleaseCommiterByTag(){
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '--tags', -1 , '--simplify-by-decoration',  '--format=\'%H\''
        standardOutput = stdout
    }
    String result =  stdout.toString()
    return result.replaceAll('\'','').trim()
}

def lastReleaseVersionByTag(){
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'for-each-ref', 'refs/tags' ,'--count', '1' ,'--sort=taggerdate', '--format=\'%(refname:short)\''
        standardOutput = stdout
    }
    String result =  stdout.toString()
    return result.replaceAll('\'','').trim()
}



//git show-ref --tags 
task lastReleaseVersionByTag(group: 'versioning',  description: 'get last release from tags'){
    logger.quiet "Latest Version: :  "  +  lastReleaseVersionByTag()
    logger.quiet "new increase version : " + getIncreaseVersion("hotfix")
    logger.quiet "lastReleaseCommiterByTag : " + lastReleaseCommiterByTag()
    markTask()
}


task createNewTag(group: 'versioning',  description: ' createNewTag -> create '/*,dependsOn:markTask*/){
    def userName = System.properties['user.name']
    generateChangelog()
    
    def currentProjectVersion = getIncreaseVersion("hotfix")
    commit()
    println '+++++++++++++++++ createNewTag  => '+  getIncreaseVersion()
    git.tag.add(name: $currentProjectVersion, annotate: true, message: " '$currentProjectVersion' by '$userName'")
    git.push(tags: true)
    markTask()
}

import java.text.SimpleDateFormat
def generateChangelog() {
    println '+++++++++++++++++ generateChangeLog'
    def changelog = ""
    def tags = git.tag.list()
    def commits = git.log {
         range(file("${project.rootDir}/src/main/resources/last-release-commit.txt").text, "HEAD")
    }
  
    def changelogFile = new File("${project.rootDir}/src/main/resources/changelog.txt")
    changelogFile.append("Changes in version : ")
    changelogFile.append("[")
    changelogFile.append(tags.first().fullName.replaceAll('refs/tags/','') ? tags.first().fullName.replaceAll('refs/tags/','') : " empty ")
    changelogFile.append("]")
    changelogFile.append(" - message -> ")
    changelogFile.append("[")
    changelogFile.append(tags.first().shortMessage?tags.first().shortMessage  : " empty ")
    changelogFile.append("]")
    changelogFile.append("  - date -> :  (")
    changelogFile.append(commits.first().getDate() ? commits.first().getDate() : "not")
    changelogFile.append(")")
    changelogFile.append("\n");
     
    commits.each {
        def message = it.fullMessage
        def time = it.getDate()
      /*if(message.startsWith("*"){
            changelogFile.append("fixed ")
            changelogFile.append(message.replaceAll('*',''))
        }
        if(message.startsWith("+"){
            changelogFile.append("added ")
            changelogFile.append(message.replaceAll('+',''))
        }
        if(message.startsWith("-"){
            changelogFile.append("removed ")
            changelogFile.append(message.replaceAll('-',''))
        }
        if(message.startsWith("#"){
            changelogFile.append("modification ")
            changelogFile.append(message.replaceAll('#',''))
        }
        if(message.startsWith("@"){
            changelogFile.append("upgrade ")
            changelogFile.append(message.replaceAll('@',''))
        }
        if(message.startsWith("%"){
            changelogFile.append("deprecated ")
            changelogFile.append(message.replaceAll('%',''))
        }
        if(message.startsWith("&"){
            changelogFile.append("improve ")
            changelogFile.append(message.replaceAll('&',''))
        }*/
        changelogFile.append(message)
        def formatDate = new SimpleDateFormat("yy-MM-dd HH:mm:ss").format(time)
        changelogFile.append(formatDate)
        changelogFile.append("\n");
           
    }
    changelogFile.append("\n\n\n\n")
    file("${project.rootDir}/src/main/resources/last-release-commit.txt").text = commits.first().id
}

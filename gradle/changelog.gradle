buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.7")
        classpath 'org.ajoberstar:gradle-git:1.3.2'
    }
}

apply plugin: 'com.gorylenko.gradle-git-properties'

import org.ajoberstar.grgit.*
ext {
    git = org.ajoberstar.grgit.Grgit.open(file('.'))
    propsFile = file('gradle.properties')
    isSnapshot = version.endsWith('-SNAPSHOT')
}

class GitInfo{
    String changeLog
    String bugfix

    GitInfo(String changeLog, String bugfix){
        this.changeLog = changeLog
        this.bugfix = bugfix
    }
    @Override
    String toString() {
        "changeLog :   $changeLog , bugfix:   $bugfix"
    }
}

class ProjectVersion {
    Integer major
    Integer minor
    Integer hotfix
    Boolean release
    String type

    ProjectVersion(Integer major, Integer minor, Integer hotfix) {
        this.major = major
        this.minor = minor
        this.hotfix = hotfix
    }

    ProjectVersion(Integer major, Integer minor, Integer hotfix, Boolean release) {
        this(major, minor, hotfix)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor.$hotfix.${release ? 'RELEASE' : 'SNAPSHOT'}"
    }
}

ProjectVersion getVersionInfo(){
    def tempVersion = lastReleaseVersionByTag().split("\\.")
    return new ProjectVersion(
            Integer.parseInt(tempVersion[0].trim()),
            Integer.parseInt(tempVersion[1].trim()),
            Integer.parseInt(tempVersion[2].trim()),
            isSnapshot
            )
}

ProjectVersion getIncreaseVersion(String verDefinition) {
    version = getVersionInfo()
    if(verDefinition == null){
        verDefinition = 'hotfix'
    }
    switch(verDefinition){
        case 'major':
            ++version.major
            version.minor = 0
            version.hotfix = 0
            version.type='major change'
            break
        case 'minor':
            ++version.minor
            version.hotfix = 0
            version.type='minor change'
            break
        case 'hotfix': ++version.hotfix
            version.type='hotfix/bugfix change'
            break
        case 'release':
            version.release = true
            break
        default: throw new GradleException("Invalid version type '$verDef. Allowed types: ['Major', 'Minor', 'Hotfix', 'Release']")
    }
    return version
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/src/main/resources")
}


def markTask(){
    def tags = git.tag.list()
    File f = file("${project.rootDir}/src/main/resources/last-release-commit.txt")
    f.write(lastReleaseCommiterByTag())
}
def lastReleaseCommiterByTag(){
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '--tags', -1 , '--simplify-by-decoration',  '--format=\'%H\''
        standardOutput = stdout
    }
    String result =  stdout.toString()
    return result.replaceAll('\'','').trim()
}

def lastReleaseVersionByTag(){
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'for-each-ref', 'refs/tags' ,'--count', '1' ,'--sort=-taggerdate', '--format=\'%(refname:short)\''
        standardOutput = stdout
    }
    String result =  stdout.toString()
    return result.replaceAll('\'','').trim()
}

task infoTag(group: 'versioning',  description: 'basic info about current git and project situation'){
    doLast{
        logger.quiet "Latest Version: :  "  +  lastReleaseVersionByTag()
        logger.quiet "last tagger commit hash : " + lastReleaseCommiterByTag()
        logger.quiet "current branch: " + git.branch.getCurrent().name
        logger.quiet "isSnapshotOrRelease  : " +  isSnapshot
        def currentProjectVersion
        if(project.hasProperty("versionType")){
            currentProjectVersion = getIncreaseVersion(project.getProperty("versionType"))
        }else{
            currentProjectVersion = getIncreaseVersion("hotfix")
        }
        logger.quiet "new increase version : " + currentProjectVersion
        propsFile.append('theVersion='+currentProjectVersion)
    }
}

task tagReleaseCi(group: 'versioning',  description: ' createNewTag : command : gradle tagRelease -PversionType=[] '){
    onlyIf{
        return new File(projectDir, '.git').exists()
    }
    def currentProjectVersion
    if(project.hasProperty("versionType")){
        currentProjectVersion = getIncreaseVersion(project.getProperty("versionType"))
    }else{
        currentProjectVersion = getIncreaseVersion("hotfix")
    }
    doLast{
        propsFile.append('theVersion='+currentProjectVersion)
        git.checkout(branch: 'dev')
        fetchAllTags()
        git.pull()
        def currentBranch = git.branch.getCurrent().name
        def userName = System.properties['user.name']
        def versionType  = currentProjectVersion.type
        def commitMessage = "!" + currentProjectVersion + "  , versionType : " + versionType + " ,  userName : " + userName       
        logger.quiet '+++++++++++++++++ createNewTag  =>  currentProjVersion :  ' +commitMessage
        commit(commitMessage)
        git.tag.add(name: currentProjectVersion, annotate: true, message: " '$versionType' by '$userName'")
        System.setProperty("org.ajoberstar.grgit.auth.username",project.getProperty("gitUser"))
        System.setProperty("org.ajoberstar.grgit.auth.password",project.getProperty("gitPasswd"))
        git.push(tags: true)
        generateChangelog()
        logger.quiet 'mark current version into last-release file  and generate changelog...'
        markTask()
    }
}

task tagRelease(group: 'versioning',  description: ' createNewTag : command : gradle tagRelease -PversionType=[] '){
    onlyIf{
        return new File(projectDir, '.git').exists()
    }
    def currentProjectVersion
    if(project.hasProperty("versionType")){
        currentProjectVersion = getIncreaseVersion(project.getProperty("versionType"))
    }else{
        currentProjectVersion = getIncreaseVersion("hotfix")
    }
    doLast{
        propsFile.append('theVersion='+currentProjectVersion)
        git.checkout(branch: 'dev')
        fetchAllTags()
        git.pull()
        def currentBranch = git.branch.getCurrent().name
        def userName = System.properties['user.name']
        def versionType  = currentProjectVersion.type
        def commitMessage = "!" + currentProjectVersion + "  , versionType : " + versionType + " ,  userName : " + userName
        logger.quiet '+++++++++++++++++ createNewTag  =>  currentProjVersion :  ' +commitMessage
        commit(commitMessage)
        git.tag.add(name: currentProjectVersion, annotate: true, message: " '$versionType' by '$userName'")
        git.push(tags: true)
        generateChangelog()
        logger.quiet '++++++++++++  lastReleaseVersionByTag ' + lastReleaseVersionByTag()
        logger.quiet 'mark current version into last-release file  and generate changelog...'
        markTask()
    }
}

def commit(String message)  {
    def clean=git.status().isClean()
    if (!clean) {
        git.add(patterns: ['.'])
        git.commit(message: "$message- ${new SimpleDateFormat("yy-MM-dd HH:mm:ss").format(new Date())}", all: true)
    }else{
        logger.quiet "Clean, commit skipped."
    }
}

def fetchAllTags(){
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'fetch', 'origin' ,'--tags'
        standardOutput = stdout
    }
}

import java.text.SimpleDateFormat
def generateChangelog() {
    def lastRef = file("${project.rootDir}/src/main/resources/last-release-commit.txt").text
    logger.quiet "generateChangeLog start from revision : " + lastRef
    def changelog = ""

    def commits = git.log { range(lastRef, "HEAD") }
    def changelogFile = new File("${project.rootDir}/src/main/resources/changelog.txt")
    changelogFile.append("Changes in version : ")
    changelogFile.append("[")
    changelogFile.append(lastReleaseVersionByTag())
    changelogFile.append("]")
    changelogFile.append("  - date -> :  (")
    changelogFile.append(commits.first().getDate() ? commits.first().getDate() : " not")
    changelogFile.append(")")
    changelogFile.append(System.getProperty("line.separator"))


    commits.each {
        def message = it.fullMessage
        def time = it.getDate()
        def formatDate = new SimpleDateFormat("yy-MM-dd HH:mm:ss").format(time)
        if(!message.startsWith("!")){

            if(message.startsWith("*")){
                changelogFile.append("fixed " + message.replaceAll('\\*','').concat(' '+formatDate))
            }
            else if(message.startsWith("+")){
                changelogFile.append("added " + message.replaceAll('+','').concat(' '+formatDate))
            }
            else if(message.startsWith("-")){
                changelogFile.append("removed " + message.replaceAll('-','').concat(' '+formatDate))
            }
            else if(message.startsWith("#")){
                changelogFile.append("modification " + message.replaceAll('#','').concat(' '+formatDate))
            }
            else if(message.startsWith("@")){
                changelogFile.append("upgrade " + message.replaceAll('@','').concat(' '+formatDate))
            }
            else if(message.startsWith("%")){
                changelogFile.append("deprecated " + message.replaceAll('%','').concat(' '+formatDate))
            }
            else if(message.startsWith("&")){
                changelogFile.append("improve " + message.replaceAll('&','').concat(' '+formatDate))
            }else{
                changelogFile.append(message.concat(' '+formatDate))
            }
            changelogFile.append(System.getProperty("line.separator"))
        }else{
            logger.quiet "no exists any information that should be append into changelog.."
        }
    }
    changelogFile.append(System.getProperty("line.separator"))
    file("${project.rootDir}/src/main/resources/last-release-commit.txt").text = commits.first().id
    commit('! ommit in changelog')
}
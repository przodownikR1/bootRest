buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
          }
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.3.2'
    }
}


import org.ajoberstar.grgit.*

ext {
    git = org.ajoberstar.grgit.Grgit.open(file('.'))
}



task push(group: 'versioning',  description: 'Push to remote branch.')<<{
    System.setProperty("org.ajoberstar.grgit.auth.username","przodownikR1")
    System.setProperty("org.ajoberstar.grgit.auth.password","******")
    git.push()
}

task gitStatus(group: 'versioning',  description: 'git status') << {
    
    def status = git.status()
    logger.quiet ""+status 
    if(status.unstaged.added || status.unstaged.modified || status.unstaged.removed ||
        status.staged.added || status.staged.modified || status.staged.removed) {
       logger.warn '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> '
       logger.warn 'committing changes'  
       logger.warn '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> '
    }
}

def gitRevision() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', 'HEAD', '-n', '1'
            standardOutput = stdout
        }
        def commitRevision = stdout.toString().trim()
        return commitRevision
    }
    catch (ignored) {
        return "(unknown revision)";
    }
}

task replaceVersion(group: 'versioning',  description: 'git -> replaceVersion') << {
    ant.replaceregexp(
        match: /(version = ')[^']*(')/,
        replace: "\\1${masterVersion}\\2",
        encoding: encoding,
        flags: 'g') {
            fileset(dir: project.projectDir) {
                include(name: 'build.gradle')
            }
        }
}

task gitPrepareDev(group: 'versioning',  description: 'git -> preparate dev') << {
    git.checkout(branch: 'dev')
    git.fetch()
    git.merge(head: 'origin/HEAD', mode: org.ajoberstar.grgit.operation.MergeOp.Mode.ONLY_FF)
    tasks.replaceVersion.execute();
}

def getVersionCode = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'tag', '--list'
            standardOutput = code
        }
        return code.toString().split("\n").size()
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty', '--long', '--always'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}
test.testLogging.showStandardStreams = true
task getVersion()<<{
    println "getVesion code  " + getVersionCode
}



